package main

import (
	"bytes"
	"encoding/json"
	"io"
	"log"
	"net/http"
)

var jsonObjects []map[string]interface{}

func main() {
	log.Printf("Listening on :8000")
	http.HandleFunc("/", handler)
	http.ListenAndServe(":8000", nil)
}

func handler(w http.ResponseWriter, r *http.Request) {
	log.Printf("%s %s %s\n", r.RemoteAddr, r.Method, r.URL)
	var data map[string]interface{}
	json.NewDecoder(r.Body).Decode(&data)
	jsonObjects = append(jsonObjects, data)
	if len(jsonObjects) == 3 {
		sendToSplunkHEC(w, jsonObjects)
		jsonObjects = nil
		return
	}
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write([]byte("OK"))
}

func sendToSplunkHEC(w http.ResponseWriter, jsonObjects []map[string]interface{}) {
	jsonBytes, _ := json.Marshal(jsonObjects)
	req, _ := http.NewRequest("POST", "https://localhost:8088", bytes.NewBuffer(jsonBytes))
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", "Bearer x")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	defer resp.Body.Close()
	w.WriteHeader(resp.StatusCode)
	_, _ = io.Copy(w, resp.Body)
}
